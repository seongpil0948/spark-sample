[project]
name = "spark-production-app"
version = "1.0.0"
description = "Production-ready Apache Spark application with ETL, streaming, and ML pipelines"
readme = "README.md"
requires-python = ">=3.9"
authors = [
    { name = "Your Team", email = "team@example.com" }
]

dependencies = [
    "pyspark==4.0.0",
    "pandas==2.2.0",
    "numpy==1.26.3",
    "pyarrow==14.0.2",
    "scikit-learn==1.4.0",
    "kafka-python==2.0.2",
    "delta-spark==4.0.0",
    "pyyaml==6.0.1",
    "python-dotenv==1.0.0",
    "prometheus-client==0.19.0",
    "structlog==24.1.0",
    "opentelemetry-api==1.28.2",
    "opentelemetry-sdk==1.28.2",
    "opentelemetry-instrumentation==0.49b2",
    "opentelemetry-instrumentation-requests==0.49b2",
    "opentelemetry-instrumentation-urllib3==0.49b2",
    "opentelemetry-exporter-otlp==1.28.2",
    "opentelemetry-exporter-otlp-proto-grpc==1.28.2",
    "opentelemetry-semantic-conventions==0.49b2",
    "psutil==5.9.8",
    "click==8.1.7",
    "requests==2.31.0",
    "boto3==1.34.14",
]

[project.optional-dependencies]
dev = [
    "pytest==7.4.4",
    "pytest-spark==0.6.0",
    "pytest-cov==4.1.0",
    "black==23.12.1",
    "flake8==7.0.0",
    "mypy==1.8.0",
    "ruff==0.8.5",
]

[project.scripts]
spark-app = "src.app:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.uv]
# uv will create a virtual environment in .venv directory
# Use 'uv sync' to create venv and install dependencies
# Use 'uv run <command>' to run commands in the virtual environment
dev-dependencies = [
    "pytest>=7.4.4",
    "pytest-spark>=0.6.0",
    "pytest-cov>=4.1.0",
    "mypy>=1.8.0",
    "ruff>=0.8.5",
    "ipykernel>=6.29.0",
    "jupyter>=1.0.0",
    "pre-commit>=3.5.0",
]

[tool.ruff]
# Exclude commonly ignored directories
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "logs",
    "data",
    "models",
    "checkpoint",
]

# Same as Black
line-length = 88
indent-width = 4

# Assume Python 3.9
target-version = "py39"

[tool.ruff.lint]
# Enable multiple rule sets
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "D",      # pydocstyle
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "RUF",    # Ruff-specific rules
    "PL",     # Pylint
    "NPY",    # NumPy-specific rules
    "PD",     # pandas-vet
]

# Specific rules to ignore
ignore = [
    "D100",   # Missing docstring in public module
    "D101",   # Missing docstring in public class
    "D102",   # Missing docstring in public method
    "D103",   # Missing docstring in public function
    "D104",   # Missing docstring in public package
    "D105",   # Missing docstring in magic method
    "D107",   # Missing docstring in __init__
    "D203",   # 1 blank line required before class docstring
    "D213",   # Multi-line docstring summary should start at the second line
    "E501",   # Line too long (handled by formatter)
    "PLR0913", # Too many arguments to function call
    "PLR2004", # Magic value used in comparison
]

# Allow autofix for all enabled rules
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D", "S101", "PLR2004"]
"scripts/*" = ["D", "T201"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["src"]

[tool.ruff.format]
# Like Black, use double quotes for strings
quote-style = "double"

# Like Black, indent with spaces
indent-style = "space"

# Like Black, respect magic trailing commas
skip-magic-trailing-comma = false

# Like Black, automatically detect line ending
line-ending = "auto"

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true
exclude = [
    "tests",
    "build",
    "dist",
    "venv",
    ".venv",
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --cov=src --cov-report=term-missing"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/config.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]